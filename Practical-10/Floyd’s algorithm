public class FloydWarshall {
    // Define infinity as a large value
    static final int INF = Integer.MAX_VALUE;

    public static void floydWarshall(int[][] graph) {
        int numVertices = graph.length;
        int[][] dist = new int[numVertices][numVertices];

        // Initialize the distance matrix
        for (int i = 0; i < numVertices; i++) {
            for (int j = 0; j < numVertices; j++) {
                if (i == j) {
                    dist[i][j] = 0; // Distance to self is zero
                } else if (graph[i][j] != 0) {
                    dist[i][j] = graph[i][j]; // Use edge weight
                } else {
                    dist[i][j] = INF; // No edge
                }
            }
        }

        // Floyd-Warshall algorithm
        for (int k = 0; k < numVertices; k++) {
            for (int i = 0; i < numVertices; i++) {
                for (int j = 0; j < numVertices; j++) {
                    if (dist[i][j] > dist[i][k] + dist[k][j]) {
                        dist[i][j] = dist[i][k] + dist[k][j];
                    }
                }
            }
        }

        // Print the resulting shortest paths matrix
        printSolution(dist);
    }

    // Utility method to print the solution
    public static void printSolution(int[][] dist) {
        System.out.println("Shortest path distances between every pair of vertices:");
        for (int i = 0; i < dist.length; i++) {
            for (int j = 0; j < dist[i].length; j++) {
                if (dist[i][j] == INF) {
                    System.out.print("INF ");
                } else {
                    System.out.print(dist[i][j] + " ");
                }
            }
            System.out.println();
        }
    }

    public static void main(String[] args) {
        // Graph represented as an adjacency matrix
        int[][] graph = {
            {0, 3, INF, 5},
            {2, 0, INF, 4},
            {INF, 1, 0, INF},
            {INF, INF, 2, 0}
        };

        floydWarshall(graph);
    }
}
